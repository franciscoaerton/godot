extends Node

# Member variables
var pj_st = 10
var pj_dx = 10
var pj_iq = 10 
var pj_ht = 10


var pj_dano_bal = [1,-1]
var pj_dano_gdp = [1,0]



func _physics_process(_delta):
	var Player = $Sprite2/Panel/Vars
	var Dano = $Sprite2/Panel/Direction
	var motion = Vector2()
	
	
	
	if Input.is_action_pressed("move_up"):
		motion += Vector2(0, -1)
		$AnimationPlayer.play("walkup")
		
	if Input.is_action_pressed("move_bottom"):
		motion += Vector2(0, 1)		
		$AnimationPlayer.play("walk")
		
	if Input.is_action_pressed("move_left"):
		motion += Vector2(-1, 0)
		$Sprite.flip_h = true
		$AnimationPlayer.play("walk")
		
		
	if Input.is_action_pressed("move_right"):
		motion += Vector2(1, 0)
		$Sprite.flip_h = false
		$AnimationPlayer.play("walk")
		
	if Input.is_action_just_pressed("Ataque_A"):
		$AnimationPlayer.play("atack_one")
		pj_st = pj_st + 1
		
	if Input.is_action_just_pressed("Ataque_B"):
		$AnimationPlayer.play("atack_two")
		pj_st = pj_st - 1
	
	
	motion = motion.normalized() * MOTION_SPEED
	Player.text = " Motion: " + String (pj_st)
	var dano = matriz_dano_gdp(pj_st)
	print(dano) 
	Dano.text = 'Custo DX' + String(cost_dx_and_iq(pj_st))
		

	move_and_slide(motion)
	
func cost_dx_and_iq(x):
	var diferenca_x = x - 10
	return 20 * diferenca_x

# retorna um array com [ num_dados_d6, + modificador]

func matriz_dano_gdp(st):
	match st:
		1:
			return [1,-5]
		2:
			return [1,-5]
		3:
			return [1,-4]
		4:
			return [1,-4]
		5:
			return [1,-3]
		6:
			return [1,-3]
		7:
			return [1,-2]
		8:
			return [1,-2]    
        	9:
			return [1,-1]
		10:
			return [1,0]
		11:
			return [1,+1]
		12:
			return [1,+2]
		13:
			return [2,-1]
		14:
			return [2,0]
        	15:
			return [2,+1]
		16:
			return [2,+2]
		17:
			return [3,-1]
		18:
			return [3,0]    
        	19:
			return [3,+1]
		20:
			return [3,+2]
		21:
			return [2,0]
		22:
			return [2,0]
		23:
			return [2,+1]
		24:
			return [2,+1]
		25:
            		return [2,+2]
		26:
            		return [2,+2]
        	27:
			return [3,-1]
		28:
			return [3,-1]    
        	29:
			return [3,0]
		30:
			return [3,0]
        	31:
			return [3,+1]
		32:
			return [3,+1]
		33:
			return [3,+2]
		34:
			return [3,+2]
		35:
			return [4,-1]
		36:
			return [4,-1]
		37:
			return [4,0]
		38:
			return [4,0]    
        	39:
			return [4,+1]
		40:
            		return [4,+1]
		45:
			return [5,0]
		50:
			return [5,+2]
		55:
			return [6,0]
		60:
			return [7,-1]
		65:
			return [7,+1]
		70:
			return [8,0]
		75:
			return [8,+2]
		80:
			return [9,0]    
        	85:
			return [9,+2]
		90:
			return [10,0]
		95:
			return [10,+2]
		100:
			return [11,0]
# dano básico por balanço . retorna um array com [ num_dados_d6, + modificador]			
func matriz_dano_bal(st):
	match st:
		1:
			return [1,-6]
		2:
			return [1,-6]
		3:
			return [1,-5]
		4:
			return [1,-5]
		5:
			return [1,-4]
		6:
			return [1,-4]
		7:
			return [1,-3]
		8:
			return [1,-3]    
        	9:
			return [1,-2]
		10:
			return [1,-2]
		11:
			return [1,-1]
		12:
			return [1,-1]
		13:
			return [1,0]
		14:
			return [1,0]
        	15:
			return [1,+1]
		16:
			return [1,+1]
		17:
			return [1,+2]
		18:
			return [1,+2]    
        	19:
			return [2,-1]
		20:
			return [2,-1]
		21:
			return [2,0]
		22:
			return [2,0]
		23:
			return [2,+1]
		24:
			return [2,+1]
		25:
            		return [2,+2]
		26:
            		return [2,+2]
        	27:
			return [3,-1]
		28:
			return [3,-1]    
        	29:
			return [3,0]
		30:
			return [3,0]
        	31:
			return [3,+1]
		32:
			return [3,+1]
		33:
			return [3,+2]
		34:
			return [3,+2]
		35:
			return [4,-1]
		36:
			return [4,-1]
		37:
			return [4,0]
		38:
			return [4,0]    
        	39:
			return [4,+1]
		40:
            		return [4,+1]
		45:
			return [5,0]
		50:
			return [5,+2]
		55:
			return [6,0]
		60:
			return [7,-1]
		65:
			return [7,+1]
		70:
			return [8,0]
		75:
			return [8,+2]
		80:
			return [9,0]    
        	85:
			return [9,+2]
		90:
			return [10,0]
		95:
			return [10,+2]
		100:
			return [11,0]
